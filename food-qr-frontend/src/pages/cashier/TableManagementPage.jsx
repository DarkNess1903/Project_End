import React, { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import axios from 'axios';
import {
  Paper,
  Box,
  Typography,
  Grid,
  Button,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  MenuItem,
  Select,
  FormControl,
  InputLabel,
  Tooltip,
  IconButton,
  Chip,
  Badge,
  List,
  ListItem,
  ListItemText,
  ListItemIcon,
  Avatar,
  Divider,
  ListItemAvatar,

} from '@mui/material';
import RefreshIcon from '@mui/icons-material/Refresh';
import RestaurantIcon from '@mui/icons-material/Restaurant';
import CheckCircleIcon from '@mui/icons-material/CheckCircle';
import RadioButtonUncheckedIcon from '@mui/icons-material/RadioButtonUnchecked';
import NotificationsIcon from '@mui/icons-material/Notifications';
import BuildIcon from '@mui/icons-material/Build';
import AcUnitIcon from '@mui/icons-material/AcUnit';
import ChatBubbleOutlineIcon from '@mui/icons-material/ChatBubbleOutline';

const TableManagementPage = () => {
  const [tables, setTables] = useState([]);
  const [selectedTable, setSelectedTable] = useState(null);
  const [openActionDialog, setOpenActionDialog] = useState(false);
  const [openMoveDialog, setOpenMoveDialog] = useState(false);
  const [targetTableId, setTargetTableId] = useState('');
  const [callNotifications, setCallNotifications] = useState([]);
  const [notificationDialogOpen, setNotificationDialogOpen] = useState(false);
  const [billDialogOpen, setBillDialogOpen] = useState(false);
  const [billData, setBillData] = useState(null);

  const navigate = useNavigate();
  const handleOpenNotificationDialog = () => {
    setNotificationDialogOpen(true);
  };

  const handleCloseNotificationDialog = () => {
    setNotificationDialogOpen(false);
  };

  const statusLabel = {
    available: '‡∏ß‡πà‡∏≤‡∏á',
    occupied:  '‡∏™‡∏±‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß',
    reserved:  '‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏ü‡πÅ‡∏•‡πâ‡∏ß',
  };

  const statusStyles = {
    available: {
      bg: 'linear-gradient(135deg, #ffffff 0%, #e0f7fa 100%)',
      icon: <RadioButtonUncheckedIcon color="disabled" />,
    },
    occupied: {
      bg: 'linear-gradient(135deg, #fff9c4 0%, #fdd835 100%)',
      icon: <RestaurantIcon color="warning" />,
    },
    reserved: {
      bg: 'linear-gradient(135deg, #a5d6a7 0%, #4caf50 100%)',
      icon: <CheckCircleIcon color="success" />,
    },
  };

  const fetchStaffCalls = async () => {
    try {
      const res = await axios.get('http://localhost/project_END/restaurant-backend/api/staff_call/read.php');
      if (res.data.success) {
        setCallNotifications(res.data.data);
      }
    } catch (err) {
      console.error('‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', err);
    }
  };

  useEffect(() => {
    fetchTables();
    fetchStaffCalls();
    const interval = setInterval(fetchStaffCalls, 5000); // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏ó‡∏∏‡∏Å 5 ‡∏ß‡∏¥

    return () => clearInterval(interval);
  }, []);

  
  const handleMarkAsHandled = async (callId) => {
  try {
    await axios.post('http://localhost/project_END/restaurant-backend/api/staff_call/update_status.php', {
      call_id: callId,
    });
    // ‡∏£‡∏µ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà
    fetchStaffCalls(); // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ä‡πâ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
  } catch (err) {
    console.error('‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', err);
    alert('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏î‡πâ');
  }
};

  const fetchTables = async () => {
    try {
      const res = await axios.get('http://localhost/project_END/restaurant-backend/api/tables/index.php');
      setTables(res.data);
    } catch (err) {
      console.error(err);
    }
  };

  // ‡πÄ‡∏õ‡∏¥‡∏î dialog ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏°‡∏ô‡∏π‡∏õ‡∏∏‡πà‡∏°‡∏ï‡πà‡∏≤‡∏á‡πÜ
  const handleOpenActionDialog = (table) => {
    // ‡πÄ‡∏õ‡∏¥‡∏î dialog ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÇ‡∏ï‡πä‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ occupied ‡∏´‡∏£‡∏∑‡∏≠ reserved ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
    if (table.Status === 'occupied' || table.Status === 'reserved') {
      setSelectedTable(table);
      setOpenActionDialog(true);
    } else {
      // ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏ï‡πä‡∏∞‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ
      alert('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏ï‡πä‡∏∞‡∏ó‡∏µ‡πà‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ß‡πà‡∏≤‡∏á‡πÑ‡∏î‡πâ');
    }
  };

  // ‡∏õ‡∏¥‡∏î dialog ‡πÄ‡∏°‡∏ô‡∏π‡∏õ‡∏∏‡πà‡∏°‡∏ï‡πà‡∏≤‡∏á‡πÜ
  const handleCloseActionDialog = () => {
    setSelectedTable(null);
    setOpenActionDialog(false);
  };

  // ‡πÄ‡∏õ‡∏¥‡∏î dialog ‡∏¢‡πâ‡∏≤‡∏¢‡πÇ‡∏ï‡πä‡∏∞
  const handleOpenMoveDialog = () => {
    setTargetTableId('');
    setOpenMoveDialog(true);
  };

  // ‡∏õ‡∏¥‡∏î dialog ‡∏¢‡πâ‡∏≤‡∏¢‡πÇ‡∏ï‡πä‡∏∞
  const handleCloseMoveDialog = () => {
    setOpenMoveDialog(false);
  };

  const handleMoveTable = async () => {
    try {
      await axios.post('http://localhost/project_END/restaurant-backend/api/tables/move.php', {
        fromTableId: selectedTable.TableID,
        toTableId: targetTableId,
      });
      setOpenMoveDialog(false);
      setOpenActionDialog(false);
      fetchTables();
    } catch (err) {
      alert(err?.response?.data?.error || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î');
      console.error(err);
    }
  };

  // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏∏‡πà‡∏° (‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
  const handleCancelTable = () => {
    alert(`‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÇ‡∏ï‡πä‡∏∞ ${selectedTable.TableNumber}`);
    // TODO: ‡πÄ‡∏û‡∏¥‡πà‡∏° logic ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÇ‡∏ï‡πä‡∏∞‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
  };

  const handleClick = (orderId) => {
    if (!orderId) {
      alert('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏ï‡πä‡∏∞‡∏ô‡∏µ‡πâ');
      return;
    }
    // ‡πÄ‡∏ï‡∏¥‡∏° prefix /cashier
    navigate(`/cashier/payment/${orderId}`);
  };

  const handleCheckBill = async () => {
    if (!selectedTable) return;
    try {
      const res = await axios.get(`http://localhost/project_END/restaurant-backend/api/orders/get_order_by_table.php?table_id=${selectedTable.TableID}`);
      if (res.data.success) {
        setBillData(res.data);
        setBillDialogOpen(true);
      } else {
        alert('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏¥‡∏•‡∏Ç‡∏≠‡∏á‡πÇ‡∏ï‡πä‡∏∞‡∏ô‡∏µ‡πâ');
      }
    } catch (err) {
      console.error(err);
      alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏¥‡∏•');
    }
  };

  const handleToggleItemStatus = async (orderItemID, currentStatus) => {
    const newStatus = currentStatus === "served" ? "cooking" : "served";

    try {
      const response = await axios.post(
        "http://localhost/project_END/restaurant-backend/api/orders/update_item_status.php",
        {
          order_item_id: orderItemID,
          status: newStatus,
        },
        {
          headers: { "Content-Type": "application/json" },
        }
      );

      if (response.data.success) {
        console.log("‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", response.data);
        // üîÅ ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏¥‡∏•
        handleCheckBill();
      } else {
        alert("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏î‡πâ");
      }
    } catch (error) {
      console.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:", error);
    }
  };

return (
  <Box display="flex" height="100vh" sx={{ bgcolor: '#f0f4f8' }}>
    <Box flex={1} p={3}>
      {/* ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠ */}
      <Box
      display="flex"
      justifyContent="space-between"
      alignItems="center"
      mb={2}
    >
      <Typography variant="h4">
        ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏ï‡πä‡∏∞
      </Typography>
        <Box>
          <Tooltip title="‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô">
          <IconButton color="secondary" onClick={handleOpenNotificationDialog}>
            <Badge badgeContent={callNotifications.length} color="error">
              <NotificationsIcon />
            </Badge>
          </IconButton>
        </Tooltip>
          <Tooltip title="‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡πÇ‡∏ï‡πä‡∏∞">
            <IconButton color="primary" onClick={fetchTables}>
              <RefreshIcon />
            </IconButton>
          </Tooltip>
        </Box>
      </Box>

      {/* ‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ */}
      <Paper
        elevation={0}
        sx={{
          p: 3,
          mb: 4,
          borderRadius: 5,
          bgcolor: '#ffffff',
          display: 'flex',
          justifyContent: 'center',
          flexWrap: 'wrap',
          gap: 2,
        }}
      >
        <Chip
          label={`‡πÇ‡∏ï‡πä‡∏∞‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${tables.length}`}
          color="default"
          variant="outlined"
        />
        <Chip
          label={`‡∏ß‡πà‡∏≤‡∏á: ${tables.filter((t) => t.Status === 'available').length}`}
          color="success"
          variant="outlined"
        />
        <Chip
          label={`‡∏™‡∏±‡πà‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÅ‡∏•‡πâ‡∏ß: ${tables.filter((t) => t.Status === 'occupied').length}`}
          color="warning"
          variant="outlined"
        />
        <Chip
          label={`‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏ü‡πÅ‡∏•‡πâ‡∏ß: ${tables.filter((t) => t.Status === 'reserved').length}`}
          color="primary"
          variant="outlined"
        />
      </Paper>

      {/* ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÅ‡∏™‡∏î‡∏á‡πÇ‡∏ï‡πä‡∏∞ */}
      <Grid container spacing={3}>
        {tables.map((table) => {
          const style = statusStyles[table.Status] || {};
          return (
            <Grid item xs={6} sm={4} md={3} key={table.TableID}>
              <Tooltip
                title={`‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${statusLabel[table.Status] || table.Status}`}
              >
                <Box
                  onClick={() => handleOpenActionDialog(table)}
                  sx={{
                    cursor: 'pointer',
                    p: 2,
                    borderRadius: 3,
                    background: style.bg || '#ddd',
                    boxShadow: '0 4px 8px rgba(0,0,0,0.1)',
                    transition: 'transform 0.15s ease-in-out',
                    '&:hover': {
                      transform: 'scale(1.05)',
                      boxShadow: '0 8px 16px rgba(0,0,0,0.2)',
                    },
                    display: 'flex',
                    flexDirection: 'column',
                    alignItems: 'center',
                    justifyContent: 'space-between',
                    gap: 1,
                    minHeight: 160,
                    textAlign: 'center',
                    bgcolor: '#fff',
                  }}
                >
                  <Box sx={{ fontSize: 48 }}>
                    {style.icon || <RadioButtonUncheckedIcon />}
                  </Box>
                  <Typography variant="h6" fontWeight="bold">
                    ‡πÇ‡∏ï‡πä‡∏∞ {table.TableNumber}
                  </Typography>
                  <Typography
                    variant="body2"
                    color="text.secondary"
                    sx={{
                      minHeight: 24,
                      display: 'flex',
                      alignItems: 'center',
                      justifyContent: 'center',
                      whiteSpace: 'nowrap',
                      overflow: 'hidden',
                      textOverflow: 'ellipsis',
                    }}
                  >
                    {statusLabel[table.Status] || table.Status}
                  </Typography>
                </Box>
              </Tooltip>
            </Grid>
          );
        })}
      </Grid>
    </Box>
    
      {/* Dialog ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á */}
      <Dialog open={openActionDialog} onClose={handleCloseActionDialog}>
        <DialogTitle>
          ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏ï‡πä‡∏∞ {selectedTable?.TableNumber}
          <Typography variant="caption" display="block" color="text.secondary" sx={{ mt: 0.5 }}>
            {/* TODO: ‡∏î‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏±‡πà‡∏á‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å backend ‡∏°‡∏≤‡πÅ‡∏™‡∏î‡∏á */}
            ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏±‡πà‡∏á: {selectedTable?.OrderTime ?? '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'}
          </Typography>
        </DialogTitle>

        <DialogContent dividers sx={{ display: 'flex', flexDirection: 'column', gap: 2, minWidth: 320 }}>
          <Button variant="outlined" color="error" onClick={handleCancelTable}>
            ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÇ‡∏ï‡πä‡∏∞
          </Button>
          <Button variant="outlined" onClick={handleOpenMoveDialog}>
            ‡∏¢‡πâ‡∏≤‡∏¢‡πÄ‡∏°‡∏ô‡∏π / ‡∏¢‡πâ‡∏≤‡∏¢‡πÇ‡∏ï‡πä‡∏∞
          </Button>
          <Button variant="contained" onClick={handleCheckBill}>
            ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ö‡∏¥‡∏•
          </Button>

          {/* ‡∏õ‡∏∏‡πà‡∏°‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏á‡∏¥‡∏ô */}
          {selectedTable?.OrderID ? (
            <Button
              variant="contained"
              color="success"
              onClick={() => handleClick(selectedTable.OrderID)}
            >
              ‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏á‡∏¥‡∏ô
            </Button>
          ) : (
            <Button variant="contained" color="success" disabled>
              ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏à‡πà‡∏≤‡∏¢
            </Button>
          )}
        </DialogContent>
        <DialogActions>
          <Button onClick={handleCloseActionDialog}>‡∏õ‡∏¥‡∏î</Button>
        </DialogActions>
      </Dialog>

      {/* Dialog ‡∏¢‡πâ‡∏≤‡∏¢‡πÇ‡∏ï‡πä‡∏∞ */}
      <Dialog open={openMoveDialog} onClose={handleCloseMoveDialog}>
        <DialogTitle>‡∏¢‡πâ‡∏≤‡∏¢‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å‡πÇ‡∏ï‡πä‡∏∞ {selectedTable?.TableNumber}</DialogTitle>
        <DialogContent>
          <FormControl fullWidth sx={{ mt: 2 }}>
            <InputLabel>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏ï‡πä‡∏∞‡πÉ‡∏´‡∏°‡πà</InputLabel>
            <Select
              value={targetTableId}
              onChange={(e) => setTargetTableId(e.target.value)}
              label="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏ï‡πä‡∏∞‡πÉ‡∏´‡∏°‡πà"
            >
              {tables
                .filter(
                  (t) =>
                    t.Status === 'empty' && t.TableID !== selectedTable?.TableID
                )
                .map((t) => (
                  <MenuItem key={t.TableID} value={t.TableID}>
                    ‡πÇ‡∏ï‡πä‡∏∞ {t.TableNumber}
                  </MenuItem>
                ))}
            </Select>
          </FormControl>
        </DialogContent>
        <DialogActions>
          <Button onClick={handleCloseMoveDialog}>‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</Button>
          <Button
            variant="contained"
            onClick={handleMoveTable}
            disabled={!targetTableId}
          >
            ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡πâ‡∏≤‡∏¢
          </Button>
        </DialogActions>
      </Dialog>

      {/* Dialog ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô */}
        <Dialog open={notificationDialogOpen} onClose={handleCloseNotificationDialog} fullWidth maxWidth="sm">
          <DialogTitle>‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô</DialogTitle>
          <DialogContent dividers>
            {callNotifications.length === 0 ? (
              <Typography align="center" color="textSecondary">
                ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ
              </Typography>
            ) : (
              <List>
                {callNotifications.map((call) => {
                  let IconComponent = ChatBubbleOutlineIcon;
                  const message = call.message || "";

                  if (message.includes('‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå')) {
                    IconComponent = BuildIcon;
                  } else if (message.includes('‡∏õ‡∏£‡∏±‡∏ö‡∏≠‡∏≤‡∏Å‡∏≤‡∏®')) {
                    IconComponent = AcUnitIcon;
                  }

                  return (
                    <ListItem
                      key={call.call_id}
                      divider
                      secondaryAction={
                        <Button
                          variant="outlined"
                          color="success"
                          onClick={() => handleMarkAsHandled(call.call_id)}
                        >
                          ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡πÅ‡∏•‡πâ‡∏ß
                        </Button>
                      }
                    >
                      <ListItemIcon>
                        <IconComponent color="primary" />
                      </ListItemIcon>
                      <ListItemText
                        primary={`‡πÇ‡∏ï‡πä‡∏∞ ${call.table_number}`}
                        secondary={`‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: ${message}`}
                      />
                    </ListItem>
                  );
                })}
              </List>
            )}
          </DialogContent>
          <DialogActions>
            <Button onClick={handleCloseNotificationDialog}>‡∏õ‡∏¥‡∏î</Button>
          </DialogActions>
        </Dialog>

      {/* Dialog ‡∏ö‡∏¥‡∏• */}
        <Dialog open={billDialogOpen} onClose={() => setBillDialogOpen(false)} fullWidth maxWidth="md">
          <DialogTitle>‡∏ö‡∏¥‡∏•‡∏Ç‡∏≠‡∏á‡πÇ‡∏ï‡πä‡∏∞ {selectedTable?.TableNumber}</DialogTitle>
          <DialogContent>
            {billData ? (
              <>
                <Typography variant="subtitle1">‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏±‡πà‡∏á: {billData.order.OrderTime}</Typography>
                <Typography variant="subtitle1">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏°‡∏ô‡∏π: {billData.items.length}</Typography>
                <Typography variant="subtitle1">‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°: ‡∏ø{parseFloat(billData.order.TotalAmount).toFixed(2)}</Typography>
                
                <Divider sx={{ my: 2 }} />

                <List>
                  {billData.items.map((item) => (
                    <ListItem key={item.OrderItemID} alignItems="flex-start" sx={{ mb: 1 }}>
                      <ListItemAvatar>
                        <Avatar
                          variant="rounded"
                          src={`http://localhost/project_END/restaurant-backend/${item.ImageURL}`}
                        />
                      </ListItemAvatar>
                      <ListItemText
                        primary={`${item.MenuName} x ${item.Quantity}`}
                        secondary={
                          <>
                            ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: {item.Note || "-"}<br />
                            ‡∏£‡∏≤‡∏Ñ‡∏≤: ‡∏ø{parseFloat(item.SubTotal).toFixed(2)}
                          </>
                        }
                      />
                      <Button
                        variant="outlined"
                        color={item.Status === "served" ? "success" : "warning"}
                        onClick={() => handleToggleItemStatus(item.OrderItemID, item.Status)}
                      >
                        {item.Status === "served" ? "‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏ü‡πÅ‡∏•‡πâ‡∏ß" : "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥ ‚Üí ‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏ü"}
                      </Button>
                    </ListItem>
                  ))}
                </List>
              </>
            ) : (
              <Typography>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...</Typography>
            )}
          </DialogContent>
          <DialogActions>
            <Button onClick={() => setBillDialogOpen(false)}>‡∏õ‡∏¥‡∏î</Button>
          </DialogActions>
        </Dialog>
    </Box>
  );
};

export default TableManagementPage;
